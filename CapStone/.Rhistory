#Gender
GenderPANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_P)
tukey_PG <- TukeyHSD(GenderPANOVA)
GenderPANOVA
tukey_PG
GenderUANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_U)
tukey_UG <- TukeyHSD(GenderUANOVA)
GenderUANOVA
tukey_UG
#Career
CareerSANOVA <- aov(CosineSimilarity ~ Gender, data = Career_S)
tukey_SC <- TukeyHSD(CareerSANOVA)
CareerSANOVA
tukey_SC
CareerNANOVA <- aov(CosineSimilarity ~ Gender, data = Career_N)
tukey_NC <- TukeyHSD(CareerNANOVA)
CareerNANOVA
tukey_NC
##########
# T-Test #
##########
#Race
#Pleasant Words
WhiteP <- Race_P %>%
filter(Race == "White")
OtherP <- Race_P %>%
filter(Race != "White")
t_raceP <- t.test(WhiteP$CosineSimilarity, OtherP$CosineSimilarity)
t_raceP
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_P_result <- t.test(WhiteP$CosineSimilarity, subset(OtherP, Race == i)$CosineSimilarity)
print(t_test_P_result)
}
#Unpleasant Words
WhiteU <- Race_U %>%
filter(Race == "White")
OtherU <- Race_U %>%
filter(Race != "White")
t_raceU <- t.test(WhiteU$CosineSimilarity, OtherU$CosineSimilarity)
t_raceU
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_U_result <- t.test(WhiteU$CosineSimilarity, subset(OtherU, Race == i)$CosineSimilarity)
print(t_test_U_result)
}
#Gender
MaleP <- Gender_P %>%
filter(Gender == "M")
FemaleP <- Gender_P %>%
filter(Gender == "F")
t_genderP <- t.test(MaleP$CosineSimilarity, FemaleP$CosineSimilarity)
t_genderP
MaleU <- Gender_U %>%
filter(Gender == "M")
FemaleU <- Gender_U %>%
filter(Gender == "F")
t_genderU <- t.test(MaleU$CosineSimilarity, FemaleU$CosineSimilarity)
t_genderU
#Career
MaleS <- Career_S %>%
filter(Gender == "M")
FemaleS <- Career_S %>%
filter(Gender == "F")
t_careerS <- t.test(MaleS$CosineSimilarity, FemaleS$CosineSimilarity)
t_careerS
MaleN <- Career_N %>%
filter(Gender == "M")
FemaleN <- Career_N %>%
filter(Gender == "F")
t_careerN <- t.test(MaleN$CosineSimilarity, FemaleN$CosineSimilarity)
t_careerN
##############
# Regression #
##############
#Race
RacePCoeff <- lm(CosineSimilarity ~ Race, data = Race_P)
summary(RacePCoeff)
tidy_output <- tidy(RacePCoeff)
write.csv(tidy_output, "stsb_lm_RaceP.csv", row.names = FALSE)
RaceUCoeff <- lm(CosineSimilarity ~ Race, data = Race_U)
summary(RaceUCoeff)
tidy_output <- tidy(RaceUCoeff)
write.csv(tidy_output, "stsb_lm_RaceU.csv", row.names = FALSE)
#Gender
GenderPCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_P)
summary(GenderPCoeff)
tidy_output <- tidy(GenderPCoeff)
write.csv(tidy_output, "stsb_lm_GenderP.csv", row.names = FALSE)
GenderUCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_U)
summary(GenderUCoeff)
tidy_output <- tidy(GenderUCoeff)
write.csv(tidy_output, "stsb_lm_GenderU.csv", row.names = FALSE)
#Career
CareerSCoeff <- lm(CosineSimilarity ~ Gender, data = Career_S)
summary(CareerSCoeff)
tidy_output <- tidy(CareerSCoeff)
write.csv(tidy_output, "stsb_lm_CareerS.csv", row.names = FALSE)
CareerNCoeff <- lm(CosineSimilarity ~ Gender, data = Career_N)
summary(CareerNCoeff)
tidy_output <- tidy(CareerNCoeff)
write.csv(tidy_output, "stsb_lm_CareerN.csv", row.names = FALSE)
rm(list = ls())
setwd("C:/Users/Ryan Ackerman/Desktop/Spring 2023/SoDA 496/SoDA496Project/CapStone/XLM_RoBERTa_base")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
##########
#        #
#  Race  #
#        #
##########
AFvU <- read.csv("AFvU.csv")
AFvP <- read.csv("AFvP.csv")
EUvU <- read.csv("EUvU.csv")
EUvP <- read.csv("EUvP.csv")
LXvU <- read.csv("LXvU.csv")
LXvP <- read.csv("LXvP.csv")
CHvU <- read.csv("CHvU.csv")
CHvP <- read.csv("CHvP.csv")
colnames(AFvP)[1] <- "Name"
colnames(AFvU)[1] <- "Name"
colnames(EUvP)[1] <- "Name"
colnames(EUvU)[1] <- "Name"
colnames(LXvP)[1] <- "Name"
colnames(LXvU)[1] <- "Name"
colnames(CHvP)[1] <- "Name"
colnames(CHvU)[1] <- "Name"
AFvP$Race <- "Black"
AFvU$Race <- "Black"
EUvP$Race <- "White"
EUvU$Race <- "White"
LXvP$Race <- "Latinx"
LXvU$Race <- "Latinx"
CHvP$Race <- "Chinese"
CHvU$Race <- "Chinese"
Pleasant <- rbind(AFvP, EUvP, LXvP, CHvP)
Unpleasant <- rbind(AFvU, EUvU, LXvU, CHvU)
Pleasant <- Pleasant %>%
select(Name, Race, everything())
Unpleasant <- Unpleasant %>%
select(Name, Race, everything())
################
# Pleasant_new #
################
# Install and load the required packages
library(stringdist)
# Create an empty dataframe to store the results
Pleasant_New <- data.frame(Name = character(), Race = character(), Word = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(Pleasant)) {
# Extract Name and Race values
name <- Pleasant$Name[i]
race <- Pleasant$Race[i]
# Loop through the other 10 attributes
for (j in 3:ncol(Pleasant)) {  # Assuming the other attributes start from the third column
word <- names(Pleasant)[j]
# Calculate cosine similarity
similarity <- Pleasant[i, j]
# Add a new row to the new dataframe
Pleasant_New <- rbind(Pleasant_New, data.frame(Name = name, Race = race, Word = word, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(Pleasant_New) <- NULL
Pleasant_New$CosineSimilarity <- as.numeric(Pleasant_New$CosineSimilarity)
# Rename columns for clarity
colnames(Pleasant_New) <- c("Name", "Race", "Word", "CosineSimilarity")
##################
# Unpleasant_new #
##################
# Create an empty dataframe to store the results
Unpleasant_New <- data.frame(Name = character(), Race = character(), Word = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(Unpleasant)) {
# Extract Name and Race values
name <- Unpleasant$Name[i]
race <- Unpleasant$Race[i]
# Loop through the other 10 attributes
for (j in 3:ncol(Unpleasant)) {  # Assuming the other attributes start from the third column
word <- names(Unpleasant)[j]
# Calculate cosine similarity
similarity <- Unpleasant[i, j]
# Add a new row to the new dataframe
Unpleasant_New <- rbind(Unpleasant_New, data.frame(Name = name, Race = race, Word = word, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(Unpleasant_New) <- NULL
Unpleasant_New$CosineSimilarity <- as.numeric(Unpleasant_New$CosineSimilarity)
# Rename columns for clarity
colnames(Unpleasant_New) <- c("Name", "Race", "Word", "CosineSimilarity")
# Add good or bad column and rbind() to create final Race dataset
Pleasant_New$Good_or_Bad <- "Good"
Unpleasant_New$Good_or_Bad <- "Bad"
RaceWithinModel <- rbind(Pleasant_New, Unpleasant_New)
write.csv(RaceWithinModel, "xlm_r_base_Race.csv", row.names = FALSE)
#####################
#                   #
# Gender and Career #
#                   #
#####################
MvU <- read.csv("MvU.csv")
MvP <- read.csv("MvP.csv")
FvU <- read.csv("FvU.csv")
FvP <- read.csv("FvP.csv")
MvS <- read.csv("MvS.csv")
MvN <- read.csv("MvN.csv")
FvS <- read.csv("FvS.csv")
FvN <- read.csv("FvN.csv")
colnames(MvU)[1] <- "Name"
colnames(MvP)[1] <- "Name"
colnames(FvU)[1] <- "Name"
colnames(FvP)[1] <- "Name"
colnames(MvS)[1] <- "Name"
colnames(MvN)[1] <- "Name"
colnames(FvS)[1] <- "Name"
colnames(FvN)[1] <- "Name"
MvU$Gender <- "M"
MvP$Gender <- "M"
FvU$Gender <- "F"
FvP$Gender <- "F"
MvS$Gender <- "M"
MvN$Gender <- "M"
FvS$Gender <- "F"
FvN$Gender <- "F"
GenderPleasant <- rbind(MvP, FvP)
GenderUnpleasant <- rbind(MvU, FvU)
STEM <- rbind(MvS, FvS)
NonSTEM <- rbind(MvN, FvN)
GenderPleasant <- GenderPleasant %>%
select(Name, Gender, everything())
GenderUnpleasant <- GenderUnpleasant %>%
select(Name, Gender, everything())
STEM <- STEM %>%
select(Name, Gender, everything())
NonSTEM <- NonSTEM %>%
select(Name, Gender, everything())
########################
# GenderUnpleasant_new #
########################
# Create an empty dataframe to store the results
GenderUnpleasant_New <- data.frame(Name = character(), Gender = character(), Word = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(GenderUnpleasant)) {
# Extract Name and Race values
name <- GenderUnpleasant$Name[i]
gender <- GenderUnpleasant$Gender[i]
# Loop through the other 10 attributes
for (j in 3:ncol(GenderUnpleasant)) {  # Assuming the other attributes start from the third column
word <- names(GenderUnpleasant)[j]
# Calculate cosine similarity
similarity <- GenderUnpleasant[i, j]
# Add a new row to the new dataframe
GenderUnpleasant_New <- rbind(GenderUnpleasant_New, data.frame(Name = name, Gender = gender, Word = word, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(GenderUnpleasant_New) <- NULL
GenderUnpleasant_New$CosineSimilarity <- as.numeric(GenderUnpleasant_New$CosineSimilarity)
# Rename columns for clarity
colnames(GenderUnpleasant_New) <- c("Name", "Gender", "Word", "CosineSimilarity")
GenderUnpleasant_New$Good_or_Bad <- "Bad"
######################
# GenderPleasant_new #
######################
# Create an empty dataframe to store the results
GenderPleasant_New <- data.frame(Name = character(), Gender = character(), Word = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(GenderPleasant)) {
# Extract Name and Race values
name <- GenderPleasant$Name[i]
gender <- GenderPleasant$Gender[i]
# Loop through the other 10 attributes
for (j in 3:ncol(GenderPleasant)) {  # Assuming the other attributes start from the third column
word <- names(GenderPleasant)[j]
# Calculate cosine similarity
similarity <- GenderPleasant[i, j]
# Add a new row to the new dataframe
GenderPleasant_New <- rbind(GenderPleasant_New, data.frame(Name = name, Gender = gender, Word = word, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(GenderPleasant_New) <- NULL
GenderPleasant_New$CosineSimilarity <- as.numeric(GenderPleasant_New$CosineSimilarity)
# Rename columns for clarity
colnames(GenderPleasant_New) <- c("Name", "Gender", "Word", "CosineSimilarity")
GenderPleasant_New$Good_or_Bad <- "Good"
##########
# Gender #
##########
GenderWithinModel <- rbind(GenderPleasant_New, GenderUnpleasant_New)
write.csv(GenderWithinModel, "xlm_r_base_Gender.csv", row.names = FALSE)
############
# STEM_New #
############
# Create an empty dataframe to store the results
STEM_New <- data.frame(Name = character(), Gender = character(), Career = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(STEM)) {
# Extract Name and Race values
name <- STEM$Name[i]
gender <- STEM$Gender[i]
# Loop through the other 10 attributes
for (j in 3:ncol(STEM)) {  # Assuming the other attributes start from the third column
career <- names(STEM)[j]
# Calculate cosine similarity
similarity <- STEM[i, j]
# Add a new row to the new dataframe
STEM_New <- rbind(STEM_New, data.frame(Name = name, Gender = gender, Career = career, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(STEM_New) <- NULL
STEM_New$CosineSimilarity <- as.numeric(STEM_New$CosineSimilarity)
# Rename columns for clarity
colnames(STEM_New) <- c("Name", "Gender", "Career", "CosineSimilarity")
STEM_New$STEM <- "Yes"
###############
# NonSTEM_New #
###############
# Create an empty dataframe to store the results
NonSTEM_New <- data.frame(Name = character(), Gender = character(), Career = character(), CosineSimilarity = numeric(), stringsAsFactors = FALSE)
# Loop through each row in the original dataframe
for (i in 1:nrow(NonSTEM)) {
# Extract Name and Race values
name <- NonSTEM$Name[i]
gender <- NonSTEM$Gender[i]
# Loop through the other 10 attributes
for (j in 3:ncol(NonSTEM)) {  # Assuming the other attributes start from the third column
career <- names(NonSTEM)[j]
# Calculate cosine similarity
similarity <- NonSTEM[i, j]
# Add a new row to the new dataframe
NonSTEM_New <- rbind(NonSTEM_New, data.frame(Name = name, Gender = gender, Career = career, CosineSimilarity = similarity))
}
}
# Reset row names and convert CosineSimilarity to numeric
rownames(NonSTEM_New) <- NULL
NonSTEM_New$CosineSimilarity <- as.numeric(NonSTEM_New$CosineSimilarity)
# Rename columns for clarity
colnames(NonSTEM_New) <- c("Name", "Gender", "Career", "CosineSimilarity")
NonSTEM_New$STEM <- "No"
##########
# Career #
##########
STEMWithinModel <- rbind(STEM_New, NonSTEM_New)
write.csv(STEMWithinModel, "xlm_r_base_Career.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
library(broom)
Race <- read.csv("xlm_r_base_Race.csv")
Gender <- read.csv("xlm_r_base_Gender.csv")
Career <- read.csv("xlm_r_base_Career.csv")
Race_P <- Race %>%
filter(Good_or_Bad == "Good")
Race_U <- Race %>%
filter(Good_or_Bad == "Bad")
#########################
# Min-Max Normalization #
#########################
# Example datasets
cosine_similarities_1 <- Race_P$CosineSimilarity
cosine_similarities_2 <- Race_U$CosineSimilarity
cosine_similarities_3 <- Gender$CosineSimilarity
cosine_similarities_4 <- Career$CosineSimilarity
# Combine the datasets into a matrix
cosine_matrix <- cbind(cosine_similarities_1, cosine_similarities_2, cosine_similarities_3, cosine_similarities_4)
# Find the overall minimum and maximum values
min_value <- min(cosine_matrix)
max_value <- max(cosine_matrix)
# Apply min-max normalization
min_max_normalized <- (cosine_matrix - min_value) / (max_value - min_value)
# Replace the original datasets with normalized values
Race_P$CosineSimilarity <- min_max_normalized[, 1]
Race_U$CosineSimilarity <- min_max_normalized[, 2]
Gender$CosineSimilarity <- min_max_normalized[, 3]
Career$CosineSimilarity <- min_max_normalized[, 4]
# Reference Factors and Splitting other data sets for analysis
refRace <- "White"
Race$Race <- relevel(factor(Race$Race), ref = refRace)
refGender <- "M"
Gender$Gender <- relevel(factor(Gender$Gender), ref = refGender)
Career$Gender <- relevel(factor(Career$Gender), ref = refGender)
Gender_P <- Gender %>%
filter(Good_or_Bad == "Good")
Gender_U <- Gender %>%
filter(Good_or_Bad == "Bad")
Career_S <- Career %>%
filter(STEM == "Yes")
Career_N <- Career %>%
filter(STEM == "No")
########################
# Analysis of Variance #
########################
#Race
RacePANOVA <- aov(CosineSimilarity ~ Race, data = Race_P)
tukey_PR <- TukeyHSD(RacePANOVA)
RacePANOVA
tukey_PR
RaceUANOVA <- aov(CosineSimilarity ~ Race, data = Race_U)
tukey_UR <- TukeyHSD(RaceUANOVA)
RaceUANOVA
tukey_UR
#Gender
GenderPANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_P)
tukey_PG <- TukeyHSD(GenderPANOVA)
GenderPANOVA
tukey_PG
GenderUANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_U)
tukey_UG <- TukeyHSD(GenderUANOVA)
GenderUANOVA
tukey_UG
#Career
CareerSANOVA <- aov(CosineSimilarity ~ Gender, data = Career_S)
tukey_SC <- TukeyHSD(CareerSANOVA)
CareerSANOVA
tukey_SC
CareerNANOVA <- aov(CosineSimilarity ~ Gender, data = Career_N)
tukey_NC <- TukeyHSD(CareerNANOVA)
CareerNANOVA
tukey_NC
##########
# T-Test #
##########
#Race
#Pleasant Words
WhiteP <- Race_P %>%
filter(Race == "White")
OtherP <- Race_P %>%
filter(Race != "White")
t_raceP <- t.test(WhiteP$CosineSimilarity, OtherP$CosineSimilarity)
t_raceP
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_P_result <- t.test(WhiteP$CosineSimilarity, subset(OtherP, Race == i)$CosineSimilarity)
print(t_test_P_result)
}
#Unpleasant Words
WhiteU <- Race_U %>%
filter(Race == "White")
OtherU <- Race_U %>%
filter(Race != "White")
t_raceU <- t.test(WhiteU$CosineSimilarity, OtherU$CosineSimilarity)
t_raceU
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_U_result <- t.test(WhiteU$CosineSimilarity, subset(OtherU, Race == i)$CosineSimilarity)
print(t_test_U_result)
}
#Gender
MaleP <- Gender_P %>%
filter(Gender == "M")
FemaleP <- Gender_P %>%
filter(Gender == "F")
t_genderP <- t.test(MaleP$CosineSimilarity, FemaleP$CosineSimilarity)
t_genderP
MaleU <- Gender_U %>%
filter(Gender == "M")
FemaleU <- Gender_U %>%
filter(Gender == "F")
t_genderU <- t.test(MaleU$CosineSimilarity, FemaleU$CosineSimilarity)
t_genderU
#Career
MaleS <- Career_S %>%
filter(Gender == "M")
FemaleS <- Career_S %>%
filter(Gender == "F")
t_careerS <- t.test(MaleS$CosineSimilarity, FemaleS$CosineSimilarity)
t_careerS
MaleN <- Career_N %>%
filter(Gender == "M")
FemaleN <- Career_N %>%
filter(Gender == "F")
t_careerN <- t.test(MaleN$CosineSimilarity, FemaleN$CosineSimilarity)
t_careerN
##############
# Regression #
##############
#Race
RacePCoeff <- lm(CosineSimilarity ~ Race, data = Race_P)
summary(RacePCoeff)
tidy_output <- tidy(RacePCoeff)
write.csv(tidy_output, "xlm_r_base_lm_RaceP.csv", row.names = FALSE)
RaceUCoeff <- lm(CosineSimilarity ~ Race, data = Race_U)
summary(RaceUCoeff)
tidy_output <- tidy(RaceUCoeff)
write.csv(tidy_output, "xlm_r_base_lm_RaceU.csv", row.names = FALSE)
#Gender
GenderPCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_P)
summary(GenderPCoeff)
tidy_output <- tidy(GenderPCoeff)
write.csv(tidy_output, "xlm_r_base_lm_GenderP.csv", row.names = FALSE)
GenderUCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_U)
summary(GenderUCoeff)
tidy_output <- tidy(GenderUCoeff)
write.csv(tidy_output, "xlm_r_base_lm_GenderU.csv", row.names = FALSE)
#Career
CareerSCoeff <- lm(CosineSimilarity ~ Gender, data = Career_S)
summary(CareerSCoeff)
tidy_output <- tidy(CareerSCoeff)
write.csv(tidy_output, "xlm_r_base_lm_CareerS.csv", row.names = FALSE)
CareerNCoeff <- lm(CosineSimilarity ~ Gender, data = Career_N)
summary(CareerNCoeff)
tidy_output <- tidy(CareerNCoeff)
write.csv(tidy_output, "xlm_r_base_lm_CareerN.csv", row.names = FALSE)
rm(list = ls())
setwd("C:/Users/Ryan Ackerman/Desktop/Spring 2023/SoDA 496/SoDA496Project/CapStone")
