distilbert_bcRacep <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_RaceP.csv")
distilbert_bcRaceu <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_RaceU.csv")
distilbert_bmcRacep <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_RaceP.csv")
distilbert_bmcRaceu <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_RaceU.csv")
ERNIE_Racep <- read.csv("./ERNIE/ERNIE_lm_RaceP.csv")
ERNIE_Raceu <- read.csv("./ERNIE/ERNIE_lm_RaceU.csv")
RoBERTa_bRacep <- read.csv("./RoBERTa_base/RoBERTa_base_lm_RaceP.csv")
RoBERTa_bRaceu <- read.csv("./RoBERTa_base/RoBERTa_base_lm_RaceU.csv")
STSB_Racep <- read.csv("./stsb_xlm_r_multi/stsb_lm_RaceP.csv")
STSB_Raceu <- read.csv("./stsb_xlm_r_multi/stsb_lm_RaceU.csv")
XLM_rRacep <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_RaceP.csv")
XLM_rRaceu <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_RaceU.csv")
BERT_bcRacep$Df <- get_dataframe_name(BERT_bcRacep)
BERT_bcRaceu$Df <- get_dataframe_name(BERT_bcRaceu)
BERT_bmcRacep$Df <- get_dataframe_name(BERT_bmcRacep)
BERT_bmcRaceu$Df <- get_dataframe_name(BERT_bmcRaceu)
BERT_bmuRacep$Df <- get_dataframe_name(BERT_bmuRacep)
BERT_bmuRaceu$Df <- get_dataframe_name(BERT_bmuRaceu)
distilbert_bcRacep$Df <- get_dataframe_name(distilbert_bcRacep)
distilbert_bcRaceu$Df <- get_dataframe_name(distilbert_bcRaceu)
distilbert_bmcRacep$Df <- get_dataframe_name(distilbert_bmcRacep)
distilbert_bmcRaceu$Df <- get_dataframe_name(distilbert_bmcRaceu)
ERNIE_Racep$Df <- get_dataframe_name(ERNIE_Racep)
ERNIE_Raceu$Df <- get_dataframe_name(ERNIE_Raceu)
RoBERTa_bRacep$Df <- get_dataframe_name(RoBERTa_bRacep)
RoBERTa_bRaceu$Df <- get_dataframe_name(RoBERTa_bRaceu)
STSB_Racep$Df <- get_dataframe_name(STSB_Racep)
STSB_Raceu$Df <- get_dataframe_name(STSB_Raceu)
XLM_rRacep$Df <- get_dataframe_name(XLM_rRacep)
XLM_rRaceu$Df <- get_dataframe_name(XLM_rRaceu)
BERT_bcRacep$Multi <- "No"
BERT_bcRaceu$Multi <- "No"
BERT_bmcRacep$Multi <- "Yes"
BERT_bmcRaceu$Multi <- "Yes"
BERT_bmuRacep$Multi <- "Yes"
BERT_bmuRaceu$Multi <- "Yes"
distilbert_bcRacep$Multi <- "No"
distilbert_bcRaceu$Multi <- "No"
distilbert_bmcRacep$Multi <- "Yes"
distilbert_bmcRaceu$Multi <- "Yes"
ERNIE_Racep$Multi <- "Yes"
ERNIE_Raceu$Multi <- "Yes"
RoBERTa_bRacep$Multi <- "No"
RoBERTa_bRaceu$Multi <- "No"
STSB_Racep$Multi <- "Yes"
STSB_Raceu$Multi <- "Yes"
XLM_rRacep$Multi <- "Yes"
XLM_rRaceu$Multi <- "Yes"
df_list <- list(BERT_bcRacep, BERT_bcRaceu, BERT_bmcRacep,
BERT_bmcRaceu, BERT_bmuRacep, BERT_bmuRaceu,
distilbert_bcRacep, distilbert_bcRaceu,
distilbert_bmcRacep, distilbert_bmcRaceu,
ERNIE_Racep, ERNIE_Raceu, RoBERTa_bRacep,
RoBERTa_bRaceu, STSB_Racep, STSB_Raceu,
XLM_rRacep, XLM_rRaceu)
#################
# ChineseVsWhite #
#################
# Create a new dataframe to store the selected values
factorCH <- data.frame(estimate = numeric(0), std.error = numeric(0), p.value = numeric(0), Df = character(0), Multi = character(0))
for (df in df_list) {
# Extract values based on the condition and bind to the new dataframe
selected_values <- filter(df, term == "RaceChinese") %>%
select(estimate, std.error, p.value, Df, Multi)
# Bind the resulting rows to the new dataframe
factorCH <- bind_rows(factorCH, selected_values)
}
# Print the resulting dataframe
print("Resulting DataFrame:")
print(factorCH)
################
# BlackVsWhite #
################
# Create a new dataframe to store the selected values
factorAF <- data.frame(estimate = numeric(0), std.error = numeric(0), p.value = numeric(0), Df = character(0), Multi = character(0))
for (df in df_list) {
# Extract values based on the condition and bind to the new dataframe
selected_values <- filter(df, term == "RaceBlack") %>%
select(estimate, std.error, p.value, Df, Multi)
# Bind the resulting rows to the new dataframe
factorAF <- bind_rows(factorAF, selected_values)
}
# Print the resulting dataframe
print("Resulting DataFrame:")
print(factorAF)
#################
# LatinxVsWhite #
#################
# Create a new dataframe to store the selected values
factorLX <- data.frame(estimate = numeric(0), std.error = numeric(0), p.value = numeric(0), Df = character(0), Multi = character(0))
for (df in df_list) {
# Extract values based on the condition and bind to the new dataframe
selected_values <- filter(df, term == "RaceLatinx") %>%
select(estimate, std.error, p.value, Df, Multi)
# Bind the resulting rows to the new dataframe
factorLX <- bind_rows(factorLX, selected_values)
}
# Print the resulting dataframe
print("Resulting DataFrame:")
print(factorLX)
ChineseUnpleasant <- factorCH %>%
filter(grepl("u$", Df)) %>%
mutate(Race = "Chinese")
ChinesePleasant <- factorCH %>%
filter(grepl("p$", Df)) %>%
mutate(Race = "Chinese")
BlackUnpleasant <- factorAF %>%
filter(grepl("u$", Df)) %>%
mutate(Race = "Black")
BlackPleasant <- factorAF %>%
filter(grepl("p$", Df)) %>%
mutate(Race = "Black")
LatinxUnpleasant <- factorLX %>%
filter(grepl("u$", Df)) %>%
mutate(Race = "Latinx")
LatinxPleasant <- factorLX %>%
filter(grepl("p$", Df)) %>%
mutate(Race = "Latinx")
View(factorAF)
View(factorCH)
View(factorLX)
setwd("C:/Users/Ryan Ackerman/Desktop/Spring 2023/SoDA 496/SoDA496Project/CapStone/BERT_base_cased")
knitr::opts_chunk$set(echo = TRUE)
FullCS <- rbind(Gender, Race, Career)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
library(broom)
Race <- read.csv("BERT_base_cased_Race.csv")
Gender <- read.csv("BERT_base_cased_Gender.csv")
Career <- read.csv("BERT_base_cased_Career.csv")
Race$Race <- factor(Race$Race, levels = c("White", "Chinese", "Latinx", "Black"))
refRace <- "White"
Race$Race <- relevel(factor(Race$Race), ref = refRace)
Race_P <- Race %>%
filter(Good_or_Bad == "Good")
Race_U <- Race %>%
filter(Good_or_Bad == "Bad")
#########################
# Min-Max Normalization #
#########################
# Example datasets
cosine_similarities_1 <- Race_P$CosineSimilarity
cosine_similarities_2 <- Race_U$CosineSimilarity
cosine_similarities_3 <- Gender$CosineSimilarity
cosine_similarities_4 <- Career$CosineSimilarity
# Combine the datasets into a matrix
cosine_matrix <- cbind(cosine_similarities_1, cosine_similarities_2, cosine_similarities_3, cosine_similarities_4)
# Find the overall minimum and maximum values
min_value <- min(cosine_matrix)
max_value <- max(cosine_matrix)
# Apply min-max normalization
min_max_normalized <- (cosine_matrix - min_value) / (max_value - min_value)
# Replace the original datasets with normalized values
Race_P$CosineSimilarity <- min_max_normalized[, 1]
Race_U$CosineSimilarity <- min_max_normalized[, 2]
Gender$CosineSimilarity <- min_max_normalized[, 3]
Career$CosineSimilarity <- min_max_normalized[, 4]
#Sample for Presentation
write.csv(Gender, "Gender_Normalized.csv")
# Reference Factors and Splitting other data sets for analysis
refGender <- "M"
Gender$Gender <- relevel(factor(Gender$Gender), ref = refGender)
Career$Gender <- relevel(factor(Career$Gender), ref = refGender)
Gender_P <- Gender %>%
filter(Good_or_Bad == "Good")
Gender_U <- Gender %>%
filter(Good_or_Bad == "Bad")
Career_S <- Career %>%
filter(STEM == "Yes")
Career_N <- Career %>%
filter(STEM == "No")
########################
# Analysis of Variance #
########################
#Race
RacePANOVA <- aov(CosineSimilarity ~ Race, data = Race_P)
tukey_PR <- TukeyHSD(RacePANOVA)
RacePANOVA
tukey_PR
RaceUANOVA <- aov(CosineSimilarity ~ Race, data = Race_U)
tukey_UR <- TukeyHSD(RaceUANOVA)
RaceUANOVA
tukey_UR
#Gender
GenderPANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_P)
tukey_PG <- TukeyHSD(GenderPANOVA)
GenderPANOVA
tukey_PG
GenderUANOVA <- aov(CosineSimilarity ~ Gender, data = Gender_U)
tukey_UG <- TukeyHSD(GenderUANOVA)
GenderUANOVA
tukey_UG
#Career
CareerSANOVA <- aov(CosineSimilarity ~ Gender, data = Career_S)
tukey_SC <- TukeyHSD(CareerSANOVA)
CareerSANOVA
tukey_SC
CareerNANOVA <- aov(CosineSimilarity ~ Gender, data = Career_N)
tukey_NC <- TukeyHSD(CareerNANOVA)
CareerNANOVA
tukey_NC
##########
# T-Test #
##########
#Race
#Pleasant Words
WhiteP <- Race_P %>%
filter(Race == "White")
OtherP <- Race_P %>%
filter(Race != "White")
t_raceP <- t.test(WhiteP$CosineSimilarity, OtherP$CosineSimilarity)
t_raceP
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_P_result <- t.test(WhiteP$CosineSimilarity, subset(OtherP, Race == i)$CosineSimilarity)
print(t_test_P_result)
}
#Unpleasant Words
WhiteU <- Race_U %>%
filter(Race == "White")
OtherU <- Race_U %>%
filter(Race != "White")
t_raceU <- t.test(WhiteU$CosineSimilarity, OtherU$CosineSimilarity)
t_raceU
#Individual races compared to White with Pleasant Words
list = list('Black','Latinx','Chinese')
for (i in list){
t_test_U_result <- t.test(WhiteU$CosineSimilarity, subset(OtherU, Race == i)$CosineSimilarity)
print(t_test_U_result)
}
#Gender
MaleP <- Gender_P %>%
filter(Gender == "M")
FemaleP <- Gender_P %>%
filter(Gender == "F")
t_genderP <- t.test(MaleP$CosineSimilarity, FemaleP$CosineSimilarity)
t_genderP
MaleU <- Gender_U %>%
filter(Gender == "M")
FemaleU <- Gender_U %>%
filter(Gender == "F")
t_genderU <- t.test(MaleU$CosineSimilarity, FemaleU$CosineSimilarity)
t_genderU
#Career
MaleS <- Career_S %>%
filter(Gender == "M")
FemaleS <- Career_S %>%
filter(Gender == "F")
t_careerS <- t.test(MaleS$CosineSimilarity, FemaleS$CosineSimilarity)
t_careerS
MaleN <- Career_N %>%
filter(Gender == "M")
FemaleN <- Career_N %>%
filter(Gender == "F")
t_careerN <- t.test(MaleN$CosineSimilarity, FemaleN$CosineSimilarity)
t_careerN
##############
# Regression #
##############
#Race
RacePCoeff <- lm(CosineSimilarity ~ Race, data = Race_P)
summary(RacePCoeff)
tidy_output <- tidy(RacePCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_RaceP.csv", row.names = FALSE)
RaceUCoeff <- lm(CosineSimilarity ~ Race, data = Race_U)
summary(RaceUCoeff)
tidy_output <- tidy(RaceUCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_RaceU.csv", row.names = FALSE)
#Gender
GenderPCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_P)
summary(GenderPCoeff)
tidy_output <- tidy(GenderPCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_GenderP.csv", row.names = FALSE)
GenderUCoeff <- lm(CosineSimilarity ~ Gender, data = Gender_U)
summary(GenderUCoeff)
tidy_output <- tidy(GenderUCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_GenderU.csv", row.names = FALSE)
#Career
CareerSCoeff <- lm(CosineSimilarity ~ Gender, data = Career_S)
summary(CareerSCoeff)
tidy_output <- tidy(CareerSCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_CareerS.csv", row.names = FALSE)
CareerNCoeff <- lm(CosineSimilarity ~ Gender, data = Career_N)
summary(CareerNCoeff)
tidy_output <- tidy(CareerNCoeff)
write.csv(tidy_output, "BERT_base_cased_lm_CareerN.csv", row.names = FALSE)
#############################
# ANOVA and T-Test Analysis #
#############################
TukeyHSD_result_list <- list(tukey_NC, tukey_SC, tukey_PG, tukey_UG, tukey_PR, tukey_UR)
list = list("NC","SC","PG","UG","PR","UR")
tidy_tukey_df <- data.frame(term = character(0), contrast = character(0), estimate = numeric(0),
null.value = numeric(0), conf.low = numeric(0), conf.high = numeric(0),
adj.p.value = numeric(0), TestName = character(0), Model = character(0))
for (i in seq_along(TukeyHSD_result_list)) {
tidy_result <- tidy(TukeyHSD_result_list[[i]])
tidy_result$TestName <- list[[i]]
tidy_result$Model <- "BERT_base_cased"
# Append the tidy_result to tidy_tukey_df
tidy_tukey_df <- bind_rows(tidy_tukey_df, tidy_result)
}
write.csv(tidy_tukey_df, "tidytukey.csv")
FullCS <- rbind(Gender, Race, Career)
FullCS <- full_join(Gender, Race)
View(FullCS)
FullCS <- full_join(FullCS, Career)
geom_density(CosineSimilarity, data = FullCS)
View(FullCS)
geom_density(aes(CosineSimilarity), data = FullCS)
hist(FullCS$CosineSimilarity)
ggplot(FullCS, aes(CosineSimilarity)) + geom_density()
rm(list = ls())
setwd("C:/Users/Ryan Ackerman/Desktop/Spring 2023/SoDA 496/SoDA496Project/CapStone")
knitr::opts_chunk$set(echo = TRUE)
##########
# Gender #
##########
BERT_bcGenderp <- read.csv("./BERT_base_cased/BERT_base_cased_lm_GenderP.csv")
BERT_bcGenderu <- read.csv("./BERT_base_cased/BERT_base_cased_lm_GenderU.csv")
BERT_bmcGenderp <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_GenderP.csv")
BERT_bmcGenderu <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_GenderU.csv")
BERT_bmuGenderp <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_GenderP.csv")
BERT_bmuGenderu <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_GenderU.csv")
distilbert_bcGenderp <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_GenderP.csv")
distilbert_bcGenderu <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_GenderU.csv")
distilbert_bmcGenderp <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_GenderP.csv")
distilbert_bmcGenderu <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_GenderU.csv")
ERNIE_Genderp <- read.csv("./ERNIE/ERNIE_lm_GenderP.csv")
ERNIE_Genderu <- read.csv("./ERNIE/ERNIE_lm_GenderU.csv")
RoBERTa_bGenderp <- read.csv("./RoBERTa_base/RoBERTa_base_lm_GenderP.csv")
RoBERTa_bGenderu <- read.csv("./RoBERTa_base/RoBERTa_base_lm_GenderU.csv")
STSB_Genderp <- read.csv("./stsb_xlm_r_multi/stsb_lm_GenderP.csv")
STSB_Genderu <- read.csv("./stsb_xlm_r_multi/stsb_lm_GenderU.csv")
XLM_rGenderp <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_GenderP.csv")
XLM_rGenderu <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_GenderU.csv")
BERT_bcGenderp$Df <- get_dataframe_name(BERT_bcGenderp)
# Front Matter
library(tidyverse)
get_dataframe_name <- function(dataframe) {
deparse(substitute(dataframe))
}
##########
# Gender #
##########
BERT_bcGenderp <- read.csv("./BERT_base_cased/BERT_base_cased_lm_GenderP.csv")
BERT_bcGenderu <- read.csv("./BERT_base_cased/BERT_base_cased_lm_GenderU.csv")
BERT_bmcGenderp <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_GenderP.csv")
BERT_bmcGenderu <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_GenderU.csv")
BERT_bmuGenderp <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_GenderP.csv")
BERT_bmuGenderu <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_GenderU.csv")
distilbert_bcGenderp <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_GenderP.csv")
distilbert_bcGenderu <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_GenderU.csv")
distilbert_bmcGenderp <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_GenderP.csv")
distilbert_bmcGenderu <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_GenderU.csv")
ERNIE_Genderp <- read.csv("./ERNIE/ERNIE_lm_GenderP.csv")
ERNIE_Genderu <- read.csv("./ERNIE/ERNIE_lm_GenderU.csv")
RoBERTa_bGenderp <- read.csv("./RoBERTa_base/RoBERTa_base_lm_GenderP.csv")
RoBERTa_bGenderu <- read.csv("./RoBERTa_base/RoBERTa_base_lm_GenderU.csv")
STSB_Genderp <- read.csv("./stsb_xlm_r_multi/stsb_lm_GenderP.csv")
STSB_Genderu <- read.csv("./stsb_xlm_r_multi/stsb_lm_GenderU.csv")
XLM_rGenderp <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_GenderP.csv")
XLM_rGenderu <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_GenderU.csv")
BERT_bcGenderp$Df <- get_dataframe_name(BERT_bcGenderp)
BERT_bcGenderu$Df <- get_dataframe_name(BERT_bcGenderu)
BERT_bmcGenderp$Df <- get_dataframe_name(BERT_bmcGenderp)
BERT_bmcGenderu$Df <- get_dataframe_name(BERT_bmcGenderu)
BERT_bmuGenderp$Df <- get_dataframe_name(BERT_bmuGenderp)
BERT_bmuGenderu$Df <- get_dataframe_name(BERT_bmuGenderu)
distilbert_bcGenderp$Df <- get_dataframe_name(distilbert_bcGenderp)
distilbert_bcGenderu$Df <- get_dataframe_name(distilbert_bcGenderu)
distilbert_bmcGenderp$Df <- get_dataframe_name(distilbert_bmcGenderp)
distilbert_bmcGenderu$Df <- get_dataframe_name(distilbert_bmcGenderu)
ERNIE_Genderp$Df <- get_dataframe_name(ERNIE_Genderp)
ERNIE_Genderu$Df <- get_dataframe_name(ERNIE_Genderu)
RoBERTa_bGenderp$Df <- get_dataframe_name(RoBERTa_bGenderp)
RoBERTa_bGenderu$Df <- get_dataframe_name(RoBERTa_bGenderu)
STSB_Genderp$Df <- get_dataframe_name(STSB_Genderp)
STSB_Genderu$Df <- get_dataframe_name(STSB_Genderu)
XLM_rGenderp$Df <- get_dataframe_name(XLM_rGenderp)
XLM_rGenderu$Df <- get_dataframe_name(XLM_rGenderu)
BERT_bcGenderp$Multi <- "No"
BERT_bcGenderu$Multi <- "No"
BERT_bmcGenderp$Multi <- "Yes"
BERT_bmcGenderu$Multi <- "Yes"
BERT_bmuGenderp$Multi <- "Yes"
BERT_bmuGenderu$Multi <- "Yes"
distilbert_bcGenderp$Multi <- "No"
distilbert_bcGenderu$Multi <- "No"
distilbert_bmcGenderp$Multi <- "Yes"
distilbert_bmcGenderu$Multi <- "Yes"
ERNIE_Genderp$Multi <- "Yes"
ERNIE_Genderu$Multi <- "Yes"
RoBERTa_bGenderp$Multi <- "No"
RoBERTa_bGenderu$Multi <- "No"
STSB_Genderp$Multi <- "Yes"
STSB_Genderu$Multi <- "Yes"
XLM_rGenderp$Multi <- "Yes"
XLM_rGenderu$Multi <- "Yes"
df_list <- list(BERT_bcGenderp, BERT_bcGenderu, BERT_bmcGenderp,
BERT_bmcGenderu, BERT_bmuGenderp, BERT_bmuGenderu,
distilbert_bcGenderp, distilbert_bcGenderu,
distilbert_bmcGenderp, distilbert_bmcGenderu,
ERNIE_Genderp, ERNIE_Genderu, RoBERTa_bGenderp,
RoBERTa_bGenderu, STSB_Genderp, STSB_Genderu,
XLM_rGenderp, XLM_rGenderu)
#################
# MaleVsFemale #
#################
# Create a new dataframe to store the selected values
factorF <- data.frame(estimate = numeric(0), std.error = numeric(0), p.value = numeric(0), Df = character(0), Multi = character(0))
for (df in df_list) {
# Extract values based on the condition and bind to the new dataframe
selected_values <- filter(df, term == "GenderF") %>%
select(estimate, std.error, p.value, Df, Multi)
# Bind the resulting rows to the new dataframe
factorF <- bind_rows(factorF, selected_values)
}
# Print the resulting dataframe
print("Resulting DataFrame:")
print(factorF)
FemaleUnpleasant <- factorF %>%
filter(grepl("u$", Df))
FemalePleasant <- factorF %>%
filter(grepl("p$", Df))
View(factorF)
##########
# Career #
##########
BERT_bcCareers <- read.csv("./BERT_base_cased/BERT_base_cased_lm_CareerS.csv")
BERT_bcCareern <- read.csv("./BERT_base_cased/BERT_base_cased_lm_CareerN.csv")
BERT_bmcCareers <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_CareerS.csv")
BERT_bmcCareern <- read.csv("./BERT_base_multi_cased/BERT_base_multi_cased_lm_CareerN.csv")
BERT_bmuCareers <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_CareerS.csv")
BERT_bmuCareern <- read.csv("./BERT_base_multi_uncased/BERT_base_multi_uncased_lm_CareerN.csv")
distilbert_bcCareers <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_CareerS.csv")
distilbert_bcCareern <- read.csv("./distilbert_base_cased/distilbert_base_cased_lm_CareerN.csv")
distilbert_bmcCareers <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_CareerS.csv")
distilbert_bmcCareern <- read.csv("./distilbert_base_multi_cased/distilbert_base_multi_cased_lm_CareerN.csv")
ERNIE_Careers <- read.csv("./ERNIE/ERNIE_lm_CareerS.csv")
ERNIE_Careern <- read.csv("./ERNIE/ERNIE_lm_CareerN.csv")
RoBERTa_bCareers <- read.csv("./RoBERTa_base/RoBERTa_base_lm_CareerS.csv")
RoBERTa_bCareern <- read.csv("./RoBERTa_base/RoBERTa_base_lm_CareerN.csv")
STSB_Careers <- read.csv("./stsb_xlm_r_multi/stsb_lm_CareerS.csv")
STSB_Careern <- read.csv("./stsb_xlm_r_multi/stsb_lm_CareerN.csv")
XLM_rCareers <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_CareerS.csv")
XLM_rCareern <- read.csv("./XLM_RoBERTa_base/xlm_r_base_lm_CareerN.csv")
BERT_bcCareers$Df <- get_dataframe_name(BERT_bcCareers)
BERT_bcCareern$Df <- get_dataframe_name(BERT_bcCareern)
BERT_bmcCareers$Df <- get_dataframe_name(BERT_bmcCareers)
BERT_bmcCareern$Df <- get_dataframe_name(BERT_bmcCareern)
BERT_bmuCareers$Df <- get_dataframe_name(BERT_bmuCareers)
BERT_bmuCareern$Df <- get_dataframe_name(BERT_bmuCareern)
distilbert_bcCareers$Df <- get_dataframe_name(distilbert_bcCareers)
distilbert_bcCareern$Df <- get_dataframe_name(distilbert_bcCareern)
distilbert_bmcCareers$Df <- get_dataframe_name(distilbert_bmcCareers)
distilbert_bmcCareern$Df <- get_dataframe_name(distilbert_bmcCareern)
ERNIE_Careers$Df <- get_dataframe_name(ERNIE_Careers)
ERNIE_Careern$Df <- get_dataframe_name(ERNIE_Careern)
RoBERTa_bCareers$Df <- get_dataframe_name(RoBERTa_bCareers)
RoBERTa_bCareern$Df <- get_dataframe_name(RoBERTa_bCareern)
STSB_Careers$Df <- get_dataframe_name(STSB_Careers)
STSB_Careern$Df <- get_dataframe_name(STSB_Careern)
XLM_rCareers$Df <- get_dataframe_name(XLM_rCareers)
XLM_rCareern$Df <- get_dataframe_name(XLM_rCareern)
BERT_bcCareers$Multi <- "No"
BERT_bcCareern$Multi <- "No"
BERT_bmcCareers$Multi <- "Yes"
BERT_bmcCareern$Multi <- "Yes"
BERT_bmuCareers$Multi <- "Yes"
BERT_bmuCareern$Multi <- "Yes"
distilbert_bcCareers$Multi <- "No"
distilbert_bcCareern$Multi <- "No"
distilbert_bmcCareers$Multi <- "Yes"
distilbert_bmcCareern$Multi <- "Yes"
ERNIE_Careers$Multi <- "Yes"
ERNIE_Careern$Multi <- "Yes"
RoBERTa_bCareers$Multi <- "No"
RoBERTa_bCareern$Multi <- "No"
STSB_Careers$Multi <- "Yes"
STSB_Careern$Multi <- "Yes"
XLM_rCareers$Multi <- "Yes"
XLM_rCareern$Multi <- "Yes"
df_list <- list(BERT_bcCareers, BERT_bcCareern, BERT_bmcCareers,
BERT_bmcCareern, BERT_bmuCareers, BERT_bmuCareern,
distilbert_bcCareers, distilbert_bcCareern,
distilbert_bmcCareers, distilbert_bmcCareern,
ERNIE_Careers, ERNIE_Careern, RoBERTa_bCareers,
RoBERTa_bCareern, STSB_Careers, STSB_Careern,
XLM_rCareers, XLM_rCareern)
################
# MaleVsFemale #
################
# Create a new dataframe to store the selected values
factorFS <- data.frame(estimate = numeric(0), std.error = numeric(0), p.value = numeric(0), Df = character(0), Multi = character(0))
for (df in df_list) {
# Extract values based on the condition and bind to the new dataframe
selected_values <- filter(df, term == "GenderF") %>%
select(estimate, std.error, p.value, Df, Multi)
# Bind the resulting rows to the new dataframe
factorFS <- bind_rows(factorFS, selected_values)
}
# Print the resulting dataframe
print("Resulting DataFrame:")
print(factorFS)
STEM <- factorFS %>%
filter(grepl("s$", Df))
NonSTEM <- factorFS %>%
filter(grepl("n$", Df))
View(factorFS)
